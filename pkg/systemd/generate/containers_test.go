//go:build !remote

package generate

import (
	"fmt"
	"strings"
	"testing"

	"github.com/containers/podman/v5/pkg/domain/entities"
	"github.com/containers/podman/v5/pkg/systemd/define"
	"github.com/stretchr/testify/assert"
)

func TestValidateRestartPolicyContainer(t *testing.T) {
	type containerInfo struct {
		restart string
	}
	tests := []struct {
		name          string
		containerInfo containerInfo
		wantErr       bool
	}{
		{"good-on", containerInfo{restart: "no"}, false},
		{"good-on-success", containerInfo{restart: "on-success"}, false},
		{"good-on-failure", containerInfo{restart: "on-failure"}, false},
		{"good-on-abnormal", containerInfo{restart: "on-abnormal"}, false},
		{"good-on-watchdog", containerInfo{restart: "on-watchdog"}, false},
		{"good-on-abort", containerInfo{restart: "on-abort"}, false},
		{"good-always", containerInfo{restart: "always"}, false},
		{"fail", containerInfo{restart: "foobar"}, true},
		{"failblank", containerInfo{restart: ""}, true},
	}
	for _, tt := range tests {
		test := tt
		t.Run(tt.name, func(t *testing.T) {
			if err := validateRestartPolicy(test.containerInfo.restart); (err != nil) != test.wantErr {
				t.Errorf("ValidateRestartPolicy() error = %v, wantErr %v", err, test.wantErr)
			}
		})
	}
}

func TestCreateContainerSystemdUnit(t *testing.T) {
	serviceInfo := `# container-639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401.service
`
	headerInfo := `# autogenerated by Podman CI
`
	goodIDContent := `
[Unit]
Description=Podman container-639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=82
ExecStart=/usr/bin/podman start 639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401
ExecStop=/usr/bin/podman stop  \
	-t 22 639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401
ExecStopPost=/usr/bin/podman stop  \
	-t 22 639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401
PIDFile=/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid
Type=forking

[Install]
WantedBy=default.target
`
	goodID := serviceInfo + headerInfo + goodIDContent
	goodIDNoHeaderInfo := serviceInfo + goodIDContent

	goodName := `# container-foobar.service
# autogenerated by Podman CI

[Unit]
Description=Podman container-foobar.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman start foobar
ExecStop=/usr/bin/podman stop  \
	-t 10 foobar
ExecStopPost=/usr/bin/podman stop  \
	-t 10 foobar
PIDFile=/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid
Type=forking

[Install]
WantedBy=default.target
`

	goodNameEmptyContainerPrefix := `# foobar.service
# autogenerated by Podman CI

[Unit]
Description=Podman foobar.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman start foobar
ExecStop=/usr/bin/podman stop  \
	-t 10 foobar
ExecStopPost=/usr/bin/podman stop  \
	-t 10 foobar
PIDFile=/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid
Type=forking

[Install]
WantedBy=default.target
`

	goodNameCustomWants := `# container-foobar.service
# autogenerated by Podman CI

[Unit]
Description=Podman container-foobar.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

# User-defined dependencies
Wants=a.service b.service c.target

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman start foobar
ExecStop=/usr/bin/podman stop  \
	-t 10 foobar
ExecStopPost=/usr/bin/podman stop  \
	-t 10 foobar
PIDFile=/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid
Type=forking

[Install]
WantedBy=default.target
`

	goodNameCustomAfter := `# container-foobar.service
# autogenerated by Podman CI

[Unit]
Description=Podman container-foobar.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

# User-defined dependencies
After=a.service b.service c.target

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman start foobar
ExecStop=/usr/bin/podman stop  \
	-t 10 foobar
ExecStopPost=/usr/bin/podman stop  \
	-t 10 foobar
PIDFile=/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid
Type=forking

[Install]
WantedBy=default.target
`

	goodNameCustomRequires := `# container-foobar.service
# autogenerated by Podman CI

[Unit]
Description=Podman container-foobar.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

# User-defined dependencies
Requires=a.service b.service c.target

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman start foobar
ExecStop=/usr/bin/podman stop  \
	-t 10 foobar
ExecStopPost=/usr/bin/podman stop  \
	-t 10 foobar
PIDFile=/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid
Type=forking

[Install]
WantedBy=default.target
`

	goodNameCustomDependencies := `# container-foobar.service
# autogenerated by Podman CI

[Unit]
Description=Podman container-foobar.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

# User-defined dependencies
Wants=a.service b.service c.target
After=a.service b.service c.target
Requires=a.service b.service c.target

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman start foobar
ExecStop=/usr/bin/podman stop  \
	-t 10 foobar
ExecStopPost=/usr/bin/podman stop  \
	-t 10 foobar
PIDFile=/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid
Type=forking

[Install]
WantedBy=default.target
`

	goodNameBoundTo := `# container-foobar.service
# autogenerated by Podman CI

[Unit]
Description=Podman container-foobar.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage
BindsTo=a.service b.service c.service pod.service
After=a.service b.service c.service pod.service

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman start foobar
ExecStop=/usr/bin/podman stop  \
	-t 10 foobar
ExecStopPost=/usr/bin/podman stop  \
	-t 10 foobar
PIDFile=/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid
Type=forking

[Install]
WantedBy=default.target
`

	goodWithNameAndGeneric := `# jadda-jadda.service
# autogenerated by Podman CI

[Unit]
Description=Podman jadda-jadda.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman container run \
	--cidfile=%t/%n.ctr-id \
	--cgroups=no-conmon \
	--rm \
	--sdnotify=conmon \
	-d \
	--replace \
	--name jadda-jadda \
	--hostname hello-world awesome-image:latest command arg1 ... argN "foo=arg \"with \" space"
ExecStop=/usr/bin/podman stop \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
ExecStopPost=/usr/bin/podman rm \
	-f \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
Type=notify
NotifyAccess=all

[Install]
WantedBy=default.target
`

	goodWithNameAndSdnotify := `# jadda-jadda.service
# autogenerated by Podman CI

[Unit]
Description=Podman jadda-jadda.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman container run \
	--cidfile=%t/%n.ctr-id \
	--cgroups=no-conmon \
	--rm \
	-d \
	--replace \
	--sdnotify=container \
	--name jadda-jadda \
	--hostname hello-world awesome-image:latest command arg1 ... argN "foo=arg \"with \" space"
ExecStop=/usr/bin/podman stop \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
ExecStopPost=/usr/bin/podman rm \
	-f \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
Type=notify
NotifyAccess=all

[Install]
WantedBy=default.target
`

	goodWithNameAndSdnotifyIgnore := `# jadda-jadda.service
# autogenerated by Podman CI

[Unit]
Description=Podman jadda-jadda.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman container run \
	--cidfile=%t/%n.ctr-id \
	--cgroups=no-conmon \
	--rm \
	--sdnotify=conmon \
	-d \
	--replace \
	--name jadda-jadda \
	--hostname hello-world awesome-image:latest command arg1 ... argN "foo=arg \"with \" space"
ExecStop=/usr/bin/podman stop \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
ExecStopPost=/usr/bin/podman rm \
	-f \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
Type=notify
NotifyAccess=all

[Install]
WantedBy=default.target
`

	goodWithExplicitShortDetachParam := `# jadda-jadda.service
# autogenerated by Podman CI

[Unit]
Description=Podman jadda-jadda.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman run \
	--cidfile=%t/%n.ctr-id \
	--cgroups=no-conmon \
	--rm \
	--sdnotify=conmon \
	--replace \
	-d \
	--name jadda-jadda \
	--hostname hello-world awesome-image:latest command arg1 ... argN
ExecStop=/usr/bin/podman stop \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
ExecStopPost=/usr/bin/podman rm \
	-f \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
Type=notify
NotifyAccess=all

[Install]
WantedBy=default.target
`

	goodNameNewWithPodFile := `# jadda-jadda.service
# autogenerated by Podman CI

[Unit]
Description=Podman jadda-jadda.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman run \
	--cidfile=%t/%n.ctr-id \
	--cgroups=no-conmon \
	--rm \
	--pod-id-file %t/pod-foobar.pod-id-file \
	--sdnotify=conmon \
	--replace \
	-d \
	--name jadda-jadda \
	--hostname hello-world awesome-image:latest command arg1 ... argN
ExecStop=/usr/bin/podman stop \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
ExecStopPost=/usr/bin/podman rm \
	-f \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
Type=notify
NotifyAccess=all

[Install]
WantedBy=default.target
`

	goodNameNewDetach := `# jadda-jadda.service
# autogenerated by Podman CI

[Unit]
Description=Podman jadda-jadda.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman run \
	--cidfile=%t/%n.ctr-id \
	--cgroups=no-conmon \
	--rm \
	--sdnotify=conmon \
	--replace \
	--detach \
	--name jadda-jadda \
	--hostname hello-world awesome-image:latest command arg1 ... argN
ExecStop=/usr/bin/podman stop \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
ExecStopPost=/usr/bin/podman rm \
	-f \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
Type=notify
NotifyAccess=all

[Install]
WantedBy=default.target
`

	goodIDNew := `# container-639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401.service
# autogenerated by Podman CI

[Unit]
Description=Podman container-639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman run \
	--cidfile=%t/%n.ctr-id \
	--cgroups=no-conmon \
	--rm \
	--sdnotify=conmon \
	-d awesome-image:latest
ExecStop=/usr/bin/podman stop \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
ExecStopPost=/usr/bin/podman rm \
	-f \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
Type=notify
NotifyAccess=all

[Install]
WantedBy=default.target
`

	genGoodNewDetach := func(detachparam string) string {
		goodNewDetach := `# jadda-jadda.service
# autogenerated by Podman CI

[Unit]
Description=Podman jadda-jadda.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=102
ExecStart=/usr/bin/podman run \
	--cidfile=%t/%n.ctr-id \
	--cgroups=no-conmon \
	--rm \
	--sdnotify=conmon \
	` +
			detachparam +
			` awesome-image:latest
ExecStop=/usr/bin/podman stop \
	--ignore -t 42 \
	--cidfile=%t/%n.ctr-id
ExecStopPost=/usr/bin/podman rm \
	-f \
	--ignore -t 42 \
	--cidfile=%t/%n.ctr-id
Type=notify
NotifyAccess=all

[Install]
WantedBy=default.target
`
		return goodNewDetach
	}

	goodNameNewDetachFalseWithCmd := `# jadda-jadda.service
# autogenerated by Podman CI

[Unit]
Description=Podman jadda-jadda.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=102
ExecStart=/usr/bin/podman run \
	--cidfile=%t/%n.ctr-id \
	--cgroups=no-conmon \
	--rm \
	--sdnotify=conmon \
	-d \
	--replace \
	--name test \
	-p 80:80 awesome-image:latest somecmd \
	--detach=false
ExecStop=/usr/bin/podman stop \
	--ignore -t 42 \
	--cidfile=%t/%n.ctr-id
ExecStopPost=/usr/bin/podman rm \
	-f \
	--ignore -t 42 \
	--cidfile=%t/%n.ctr-id
Type=notify
NotifyAccess=all

[Install]
WantedBy=default.target
`

	goodNewRootFlags := `# jadda-jadda.service
# autogenerated by Podman CI

[Unit]
Description=Podman jadda-jadda.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=102
ExecStart=/usr/bin/podman \
	--events-backend none \
	--runroot /root run \
	--cidfile=%t/%n.ctr-id \
	--cgroups=no-conmon \
	--rm \
	--sdnotify=conmon \
	-d awesome-image:latest
ExecStop=/usr/bin/podman stop \
	--ignore -t 42 \
	--cidfile=%t/%n.ctr-id
ExecStopPost=/usr/bin/podman rm \
	-f \
	--ignore -t 42 \
	--cidfile=%t/%n.ctr-id
Type=notify
NotifyAccess=all

[Install]
WantedBy=default.target
`

	goodContainerCreate := `# jadda-jadda.service
# autogenerated by Podman CI

[Unit]
Description=Podman jadda-jadda.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman container run \
	--cidfile=%t/%n.ctr-id \
	--cgroups=no-conmon \
	--rm \
	--sdnotify=conmon \
	-d awesome-image:latest
ExecStop=/usr/bin/podman stop \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
ExecStopPost=/usr/bin/podman rm \
	-f \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
Type=notify
NotifyAccess=all

[Install]
WantedBy=default.target
`

	goodNewWithJournaldTag := `# jadda-jadda.service
# autogenerated by Podman CI

[Unit]
Description=Podman jadda-jadda.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman run \
	--cidfile=%t/%n.ctr-id \
	--cgroups=no-conmon \
	--rm \
	--sdnotify=conmon \
	-d \
	--replace \
	--name test \
	--log-driver=journald \
	--log-opt=tag={{.Name}} awesome-image:latest
ExecStop=/usr/bin/podman stop \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
ExecStopPost=/usr/bin/podman rm \
	-f \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
Type=notify
NotifyAccess=all

[Install]
WantedBy=default.target
`

	goodNewWithSpecialChars := `# jadda-jadda.service
# autogenerated by Podman CI

[Unit]
Description=Podman jadda-jadda.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman run \
	--cidfile=%t/%n.ctr-id \
	--cgroups=no-conmon \
	--rm \
	--sdnotify=conmon \
	-d \
	--replace \
	--name test awesome-image:latest sh \
	-c "kill $$$$ && echo %%\\"
ExecStop=/usr/bin/podman stop \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
ExecStopPost=/usr/bin/podman rm \
	-f \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
Type=notify
NotifyAccess=all

[Install]
WantedBy=default.target
`

	goodNewWithIDFiles := `# jadda-jadda.service
# autogenerated by Podman CI

[Unit]
Description=Podman jadda-jadda.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman run \
	--cidfile=%t/%n.ctr-id \
	--cgroups=no-conmon \
	--rm \
	--sdnotify=conmon \
	-d \
	--conmon-pidfile=foo awesome-image:latest podman run \
	--cgroups=foo \
	--conmon-pidfile=foo \
	--cidfile=foo alpine
ExecStop=/usr/bin/podman stop \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
ExecStopPost=/usr/bin/podman rm \
	-f \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
Type=notify
NotifyAccess=all

[Install]
WantedBy=default.target
`

	goodNewWithPodIDFiles := `# jadda-jadda.service
# autogenerated by Podman CI

[Unit]
Description=Podman jadda-jadda.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman run \
	--cidfile=%t/%n.ctr-id \
	--cgroups=no-conmon \
	--rm \
	--pod-id-file %t/pod-foobar.pod-id-file \
	--sdnotify=conmon \
	-d \
	--conmon-pidfile=foo awesome-image:latest podman run \
	--cgroups=foo \
	--conmon-pidfile=foo \
	--cidfile=foo \
	--pod-id-file /tmp/pod-foobar.pod-id-file alpine
ExecStop=/usr/bin/podman stop \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
ExecStopPost=/usr/bin/podman rm \
	-f \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
Type=notify
NotifyAccess=all

[Install]
WantedBy=default.target
`

	goodNewWithEnvar := `# jadda-jadda.service
# autogenerated by Podman CI

[Unit]
Description=Podman jadda-jadda.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Environment=FOO=abc "BAR=my test" USER=%%a
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman run \
	--cidfile=%t/%n.ctr-id \
	--cgroups=no-conmon \
	--rm \
	--sdnotify=conmon \
	-d \
	--env FOO \
	--env=BAR \
	--env=MYENV=2 \
	-e USER awesome-image:latest
ExecStop=/usr/bin/podman stop \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
ExecStopPost=/usr/bin/podman rm \
	-f \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
Type=notify
NotifyAccess=all

[Install]
WantedBy=default.target
`

	goodEnvironment := `# container-foobar.service
# autogenerated by Podman CI

[Unit]
Description=Podman container-foobar.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Environment=FOO=abc
Environment="BAR=my test"
Environment=USER=%%a
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman start foobar
ExecStop=/usr/bin/podman stop  \
	-t 10 foobar
ExecStopPost=/usr/bin/podman stop  \
	-t 10 foobar
PIDFile=/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid
Type=forking

[Install]
WantedBy=default.target
`

	goodNewWithRestartPolicy := `# jadda-jadda.service
# autogenerated by Podman CI

[Unit]
Description=Podman jadda-jadda.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
StartLimitBurst=42
TimeoutStopSec=70
ExecStart=/usr/bin/podman run \
	--cidfile=%t/%n.ctr-id \
	--cgroups=no-conmon \
	--rm \
	--sdnotify=conmon \
	-d awesome-image:latest
ExecStop=/usr/bin/podman stop \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
ExecStopPost=/usr/bin/podman rm \
	-f \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
Type=notify
NotifyAccess=all

[Install]
WantedBy=default.target
`

	goodNewWithHostname := `# jadda-jadda.service
# autogenerated by Podman CI

[Unit]
Description=Podman jadda-jadda.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
TimeoutStopSec=70
ExecStart=/usr/bin/podman run \
	--cidfile=%t/%n.ctr-id \
	--cgroups=no-conmon \
	--rm \
	--sdnotify=conmon \
	-d \
	-h hostname awesome-image:latest
ExecStop=/usr/bin/podman stop \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
ExecStopPost=/usr/bin/podman rm \
	-f \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
Type=notify
NotifyAccess=all

[Install]
WantedBy=default.target
`

	templateGood := `# container-foo@.service
# autogenerated by Podman CI

[Unit]
Description=Podman container-foo.service for %I
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n-%i
Restart=on-failure
StartLimitBurst=42
TimeoutStopSec=70
ExecStart=/usr/bin/podman run \
	--name=container-foo-%i \
	--cidfile=%t/%n.ctr-id \
	--cgroups=no-conmon \
	--rm \
	--sdnotify=conmon \
	-d awesome-image:latest
ExecStop=/usr/bin/podman stop \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
ExecStopPost=/usr/bin/podman rm \
	-f \
	--ignore -t 10 \
	--cidfile=%t/%n.ctr-id
Type=notify
NotifyAccess=all

[Install]
WantedBy=default.target
`
	goodRestartSec := `# container-foobar.service
# autogenerated by Podman CI

[Unit]
Description=Podman container-foobar.service
Documentation=man:podman-generate-systemd(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=/var/run/containers/storage

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
RestartSec=15
TimeoutStopSec=70
ExecStart=/usr/bin/podman start foobar
ExecStop=/usr/bin/podman stop  \
	-t 10 foobar
ExecStopPost=/usr/bin/podman stop  \
	-t 10 foobar
PIDFile=/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid
Type=forking

[Install]
WantedBy=default.target
`
	tests := []struct {
		name     string
		info     containerInfo
		want     string
		new      bool
		noHeader bool
		wantErr  bool
		template bool
	}{

		{"good with id",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "container-639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401",
				ContainerNameOrID: "639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401",
				PIDFile:           "/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       22,
				PodmanVersion:     "CI",
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodID,
			false,
			false,
			false,
			false,
		},
		{"good with noHeader",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "container-639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401",
				ContainerNameOrID: "639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401",
				PIDFile:           "/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       22,
				PodmanVersion:     "CI",
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodIDNoHeaderInfo,
			false,
			true,
			false,
			false,
		},
		{"good with name",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "container-foobar",
				ContainerNameOrID: "foobar",
				PIDFile:           "/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodName,
			false,
			false,
			false,
			false,
		},
		{"good with name and wants",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "container-foobar",
				ContainerNameOrID: "foobar",
				PIDFile:           "/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				Wants:             []string{"a.service", "b.service", "c.target"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodNameCustomWants,
			false,
			false,
			false,
			false,
		},
		{"good with name and after",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "container-foobar",
				ContainerNameOrID: "foobar",
				PIDFile:           "/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				After:             []string{"a.service", "b.service", "c.target"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodNameCustomAfter,
			false,
			false,
			false,
			false,
		},
		{"good with name and requires",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "container-foobar",
				ContainerNameOrID: "foobar",
				PIDFile:           "/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				Requires:          []string{"a.service", "b.service", "c.target"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodNameCustomRequires,
			false,
			false,
			false,
			false,
		},
		{"good with name and dependencies",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "container-foobar",
				ContainerNameOrID: "foobar",
				PIDFile:           "/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				Wants:             []string{"a.service", "b.service", "c.target"},
				After:             []string{"a.service", "b.service", "c.target"},
				Requires:          []string{"a.service", "b.service", "c.target"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodNameCustomDependencies,
			false,
			false,
			false,
			false,
		},
		{"good with name and bound to",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "container-foobar",
				ContainerNameOrID: "foobar",
				PIDFile:           "/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				BoundToServices:   []string{"pod", "a", "b", "c"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodNameBoundTo,
			false,
			false,
			false,
			false,
		},
		{"good with name and generic",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				CreateCommand:     []string{"I'll get stripped", "container", "run", "--name", "jadda-jadda", "--hostname", "hello-world", "awesome-image:latest", "command", "arg1", "...", "argN", "foo=arg \"with \" space"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodWithNameAndGeneric,
			true,
			false,
			false,
			false,
		},
		{"good with name and --sdnotify=container",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				CreateCommand:     []string{"I'll get stripped", "container", "run", "--sdnotify=container", "--name", "jadda-jadda", "--hostname", "hello-world", "awesome-image:latest", "command", "arg1", "...", "argN", "foo=arg \"with \" space"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodWithNameAndSdnotify,
			true,
			false,
			false,
			false,
		},
		{"good with name and --sdnotify container",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				CreateCommand:     []string{"I'll get stripped", "container", "run", "--sdnotify", "container", "--name", "jadda-jadda", "--hostname", "hello-world", "awesome-image:latest", "command", "arg1", "...", "argN", "foo=arg \"with \" space"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			strings.ReplaceAll(goodWithNameAndSdnotify, "--sdnotify=container", "--sdnotify container"),
			true,
			false,
			false,
			false,
		},
		{"good with name and --sdnotify=ignore",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				CreateCommand:     []string{"I'll get stripped", "container", "run", "--sdnotify=ignore", "--name", "jadda-jadda", "--hostname", "hello-world", "awesome-image:latest", "command", "arg1", "...", "argN", "foo=arg \"with \" space"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodWithNameAndSdnotifyIgnore,
			true,
			false,
			false,
			false,
		},
		{"good with name and --sdnotify ignore",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				CreateCommand:     []string{"I'll get stripped", "container", "run", "--sdnotify", "ignore", "--name", "jadda-jadda", "--hostname", "hello-world", "awesome-image:latest", "command", "arg1", "...", "argN", "foo=arg \"with \" space"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodWithNameAndSdnotifyIgnore,
			true,
			false,
			false,
			false,
		},
		{"good with explicit short detach param",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				CreateCommand:     []string{"I'll get stripped", "run", "-d", "--name", "jadda-jadda", "--hostname", "hello-world", "awesome-image:latest", "command", "arg1", "...", "argN"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodWithExplicitShortDetachParam,
			true,
			false,
			false,
			false,
		},
		{"good with explicit short detach param and podInfo",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				CreateCommand:     []string{"I'll get stripped", "run", "-d", "--name", "jadda-jadda", "--hostname", "hello-world", "awesome-image:latest", "command", "arg1", "...", "argN"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
				Pod: &podInfo{
					PodIDFile: "%t/pod-foobar.pod-id-file",
				},
			},
			goodNameNewWithPodFile,
			true,
			false,
			false,
			false,
		},
		{"good with explicit full detach param",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				CreateCommand:     []string{"I'll get stripped", "run", "--detach", "--name", "jadda-jadda", "--hostname", "hello-world", "awesome-image:latest", "command", "arg1", "...", "argN"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodNameNewDetach,
			true,
			false,
			false,
			false,
		},
		{"good with id and no param",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "container-639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401",
				ContainerNameOrID: "639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401",
				PIDFile:           "/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				CreateCommand:     []string{"I'll get stripped", "run", "awesome-image:latest"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodIDNew,
			true,
			false,
			false,
			false,
		},
		{"good with explicit detach=true param",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/var/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       42,
				PodmanVersion:     "CI",
				CreateCommand:     []string{"I'll get stripped", "run", "--detach=true", "awesome-image:latest"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			genGoodNewDetach("--detach=true"),
			true,
			false,
			false,
			false,
		},
		{"good with explicit detach=false param",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/var/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       42,
				PodmanVersion:     "CI",
				CreateCommand:     []string{"I'll get stripped", "run", "--detach=false", "awesome-image:latest"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			genGoodNewDetach("-d"),
			true,
			false,
			false,
			false,
		},
		{"good with explicit detach=false param",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/var/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       42,
				PodmanVersion:     "CI",
				CreateCommand:     []string{"I'll get stripped", "run", "--name", "test", "-p", "80:80", "--detach=false", "awesome-image:latest", "somecmd", "--detach=false"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodNameNewDetachFalseWithCmd,
			true,
			false,
			false,
			false,
		},
		{"good with multiple detach=false params",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/var/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       42,
				PodmanVersion:     "CI",
				CreateCommand:     []string{"I'll get stripped", "run", "--name", "test", "-p", "80:80", "--detach=false", "--detach=false", "awesome-image:latest", "somecmd", "--detach=false"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodNameNewDetachFalseWithCmd,
			true,
			false,
			false,
			false,
		},
		{"good with multiple shorthand params detach first",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/var/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       42,
				PodmanVersion:     "CI",
				CreateCommand:     []string{"I'll get stripped", "run", "-dti", "awesome-image:latest"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			genGoodNewDetach("-dti"),
			true,
			false,
			false,
			false,
		},
		{"good with multiple shorthand params detach last",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/var/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       42,
				PodmanVersion:     "CI",
				CreateCommand:     []string{"I'll get stripped", "--events-backend", "none", "--runroot", "/root", "run", "awesome-image:latest"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodNewRootFlags,
			true,
			false,
			false,
			false,
		},
		{"good with container create",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/var/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				CreateCommand:     []string{"I'll get stripped", "container", "create", "awesome-image:latest"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodContainerCreate,
			true,
			false,
			false,
			false,
		},
		{"good with journald log tag (see #9034)",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/var/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				CreateCommand:     []string{"I'll get stripped", "create", "--name", "test", "--log-driver=journald", "--log-opt=tag={{.Name}}", "awesome-image:latest"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodNewWithJournaldTag,
			true,
			false,
			false,
			false,
		},
		{"good with special chars",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/var/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				CreateCommand:     []string{"I'll get stripped", "create", "--name", "test", "awesome-image:latest", "sh", "-c", "kill $$ && echo %\\"},
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodNewWithSpecialChars,
			true,
			false,
			false,
			false,
		},
		{"good with ID files",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/var/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
				CreateCommand:     []string{"I'll get stripped", "create", "--cgroups=foo", "--conmon-pidfile=foo", "--cidfile=foo", "awesome-image:latest", "podman", "run", "--cgroups=foo", "--conmon-pidfile=foo", "--cidfile=foo", "alpine"},
				EnvVariable:       define.EnvVariable,
			},
			goodNewWithIDFiles,
			true,
			false,
			false,
			false,
		},
		{"good with pod ID files",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/var/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
				CreateCommand:     []string{"I'll get stripped", "create", "--cgroups=foo", "--conmon-pidfile=foo", "--cidfile=foo", "--pod", "test", "awesome-image:latest", "podman", "run", "--cgroups=foo", "--conmon-pidfile=foo", "--cidfile=foo", "--pod-id-file", "/tmp/pod-foobar.pod-id-file", "alpine"},
				EnvVariable:       define.EnvVariable,
				Pod: &podInfo{
					PodIDFile: "%t/pod-foobar.pod-id-file",
				},
			},
			goodNewWithPodIDFiles,
			true,
			false,
			false,
			false,
		},
		{"good with container environment variables",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/var/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
				CreateCommand:     []string{"I'll get stripped", "create", "--env", "FOO", "--env=BAR", "--env=MYENV=2", "-e", "USER", "awesome-image:latest"},
				containerEnv:      []string{"FOO=abc", "BAR=my test", "USER=%a", "MYENV=2"},
				EnvVariable:       define.EnvVariable,
			},
			goodNewWithEnvar,
			true,
			false,
			false,
			false,
		},
		{"good with systemd environment variables",
			containerInfo{
				Executable:             "/usr/bin/podman",
				ServiceName:            "container-foobar",
				ContainerNameOrID:      "foobar",
				PIDFile:                "/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:            10,
				PodmanVersion:          "CI",
				GraphRoot:              "/var/lib/containers/storage",
				RunRoot:                "/var/run/containers/storage",
				EnvVariable:            define.EnvVariable,
				AdditionalEnvVariables: []string{"FOO=abc", "BAR=my test", "USER=%a"},
			},
			goodEnvironment,
			false,
			false,
			false,
			false,
		},
		{"good with restart policy",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/var/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
				CreateCommand:     []string{"I'll get stripped", "create", "--restart", "on-failure:42", "awesome-image:latest"},
				EnvVariable:       define.EnvVariable,
			},
			goodNewWithRestartPolicy,
			true,
			false,
			false,
			false,
		},
		{"good with -h hostname",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "jadda-jadda",
				ContainerNameOrID: "jadda-jadda",
				PIDFile:           "/var/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
				CreateCommand:     []string{"I'll get stripped", "create", "-h", "hostname", "awesome-image:latest"},
				EnvVariable:       define.EnvVariable,
			},
			goodNewWithHostname,
			true,
			false,
			false,
			false,
		},
		{"good template",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "container-foo",
				ContainerNameOrID: "foo",
				PIDFile:           "/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
				CreateCommand:     []string{"I'll get stripped", "create", "--restart", "on-failure:42", "awesome-image:latest"},
			},
			templateGood,
			true,
			false,
			false,
			true,
		},
		{"good with name and empty container-prefix",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "foobar",
				ContainerNameOrID: "foobar",
				PIDFile:           "/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
			},
			goodNameEmptyContainerPrefix,
			false,
			false,
			false,
			false,
		},
		{"good with RestartSec",
			containerInfo{
				Executable:        "/usr/bin/podman",
				ServiceName:       "container-foobar",
				ContainerNameOrID: "foobar",
				PIDFile:           "/run/containers/storage/overlay-containers/639c53578af4d84b8800b4635fa4e680ee80fd67e0e6a2d4eea48d1e3230f401/userdata/conmon.pid",
				StopTimeout:       10,
				PodmanVersion:     "CI",
				EnvVariable:       define.EnvVariable,
				GraphRoot:         "/var/lib/containers/storage",
				RunRoot:           "/var/run/containers/storage",
				RestartSec:        15,
			},
			goodRestartSec,
			false,
			false,
			false,
			false,
		},
	}
	for _, tt := range tests {
		test := tt
		t.Run(tt.name, func(t *testing.T) {
			opts := entities.GenerateSystemdOptions{
				New:              test.new,
				NoHeader:         test.noHeader,
				TemplateUnitFile: test.template,
			}
			test.info.RestartPolicy = define.DefaultRestartPolicy
			got, err := executeContainerTemplate(&test.info, opts)
			if (err != nil) != test.wantErr {
				t.Errorf("CreateContainerSystemdUnit() %s error = \n%v, wantErr \n%v", test.name, err, test.wantErr)
				return
			}
			assert.Equal(t, test.want, got, test.name)
		})
	}
}

func TestSetContainerNameForTemplate(t *testing.T) {
	tt := []struct {
		name         string
		startCommand []string
		info         *containerInfo
		expected     []string
		err          error
	}{
		{
			name:         "no name argument is set",
			startCommand: []string{"/usr/bin/podman", "run", "busybox", "top"},
			info:         &containerInfo{ServiceName: "container-122"},
			expected:     []string{"/usr/bin/podman", "run", "--name=container-122-%i", "busybox", "top"},
			err:          nil,
		},
		{
			name:         "--name=value is used in arguments",
			startCommand: []string{"/usr/bin/podman", "run", "--name=lovely_james", "busybox", "top"},
			info:         &containerInfo{},
			expected:     []string{"/usr/bin/podman", "run", "--name=lovely_james-%i", "busybox", "top"},
			err:          nil,
		},
		{
			name:         "--name value is used in arguments",
			startCommand: []string{"/usr/bin/podman", "run", "--name", "lovely_james", "busybox", "top"},
			info:         &containerInfo{},
			expected:     []string{"/usr/bin/podman", "run", "--name", "lovely_james-%i", "busybox", "top"},
			err:          nil,
		},
		{
			name:         "--name value is used in arguments",
			startCommand: []string{"/usr/bin/podman", "create", "busybox", "top"},
			info:         &containerInfo{},
			expected:     []string{"/usr/bin/podman", "create", "busybox", "top"},
			err:          fmt.Errorf("\"run\" is missing in the command arguments"),
		},
	}

	for _, te := range tt {
		res, err := setContainerNameForTemplate(te.startCommand, te.info)
		assert.Equal(t, te.err, err)
		assert.Equal(t, te.expected, res)
	}
}
