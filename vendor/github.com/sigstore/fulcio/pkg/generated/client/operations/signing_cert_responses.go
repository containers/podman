// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright 2021 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/sigstore/fulcio/pkg/generated/models"
)

// SigningCertReader is a Reader for the SigningCert structure.
type SigningCertReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SigningCertReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewSigningCertCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSigningCertBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSigningCertUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewSigningCertDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSigningCertCreated creates a SigningCertCreated with default headers values
func NewSigningCertCreated() *SigningCertCreated {
	return &SigningCertCreated{}
}

/* SigningCertCreated describes a response with status code 201, with default header values.

Generated Certificate Chain
*/
type SigningCertCreated struct {
	Payload string
}

func (o *SigningCertCreated) Error() string {
	return fmt.Sprintf("[POST /signingCert][%d] signingCertCreated  %+v", 201, o.Payload)
}
func (o *SigningCertCreated) GetPayload() string {
	return o.Payload
}

func (o *SigningCertCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSigningCertBadRequest creates a SigningCertBadRequest with default headers values
func NewSigningCertBadRequest() *SigningCertBadRequest {
	return &SigningCertBadRequest{}
}

/* SigningCertBadRequest describes a response with status code 400, with default header values.

The content supplied to the server was invalid
*/
type SigningCertBadRequest struct {
	ContentType string

	Payload *models.Error
}

func (o *SigningCertBadRequest) Error() string {
	return fmt.Sprintf("[POST /signingCert][%d] signingCertBadRequest  %+v", 400, o.Payload)
}
func (o *SigningCertBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *SigningCertBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Type
	hdrContentType := response.GetHeader("Content-Type")

	if hdrContentType != "" {
		o.ContentType = hdrContentType
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSigningCertUnauthorized creates a SigningCertUnauthorized with default headers values
func NewSigningCertUnauthorized() *SigningCertUnauthorized {
	return &SigningCertUnauthorized{}
}

/* SigningCertUnauthorized describes a response with status code 401, with default header values.

The request could not be authorized
*/
type SigningCertUnauthorized struct {
	ContentType string

	/* Information about required authentication to access server
	 */
	WWWAuthenticate string

	Payload *models.Error
}

func (o *SigningCertUnauthorized) Error() string {
	return fmt.Sprintf("[POST /signingCert][%d] signingCertUnauthorized  %+v", 401, o.Payload)
}
func (o *SigningCertUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *SigningCertUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Type
	hdrContentType := response.GetHeader("Content-Type")

	if hdrContentType != "" {
		o.ContentType = hdrContentType
	}

	// hydrates response header WWW-Authenticate
	hdrWWWAuthenticate := response.GetHeader("WWW-Authenticate")

	if hdrWWWAuthenticate != "" {
		o.WWWAuthenticate = hdrWWWAuthenticate
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSigningCertDefault creates a SigningCertDefault with default headers values
func NewSigningCertDefault(code int) *SigningCertDefault {
	return &SigningCertDefault{
		_statusCode: code,
	}
}

/* SigningCertDefault describes a response with status code -1, with default header values.

There was an internal error in the server while processing the request
*/
type SigningCertDefault struct {
	_statusCode int
	ContentType string

	Payload *models.Error
}

// Code gets the status code for the signing cert default response
func (o *SigningCertDefault) Code() int {
	return o._statusCode
}

func (o *SigningCertDefault) Error() string {
	return fmt.Sprintf("[POST /signingCert][%d] signingCert default  %+v", o._statusCode, o.Payload)
}
func (o *SigningCertDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *SigningCertDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Type
	hdrContentType := response.GetHeader("Content-Type")

	if hdrContentType != "" {
		o.ContentType = hdrContentType
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
