From 42a2977ef907112fd48575bcf69aef7847726a9b Mon Sep 17 00:00:00 2001
From: Ed Santiago <santiago@redhat.com>
Date: Thu, 6 Oct 2022 17:32:59 -0600
Subject: [PATCH] tweaks for running buildah tests under podman

Signed-off-by: Ed Santiago <santiago@redhat.com>
---
 tests/helpers.bash | 126 +++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 122 insertions(+), 4 deletions(-)

diff --git a/tests/helpers.bash b/tests/helpers.bash
index ed5de994e..8f82a9fd4 100644
--- a/tests/helpers.bash
+++ b/tests/helpers.bash
@@ -80,6 +80,42 @@ EOF
     BUILDAH_REGISTRY_OPTS="${regconfopt} ${regconfdir} --short-name-alias-conf ${TEST_SCRATCH_DIR}/cache/shortnames.conf"
     COPY_REGISTRY_OPTS="${BUILDAH_REGISTRY_OPTS}"
     PODMAN_REGISTRY_OPTS="${regconfopt}"
+    PODMAN_REMOTE_OPTS=
+
+    PODMAN_SERVER_PID=
+    PODMAN_NATIVE="${PODMAN_BINARY} ${ROOTDIR_OPTS} ${PODMAN_REGISTRY_OPTS}"
+    if [[ -n "$REMOTE" ]]; then
+        PODMAN_NATIVE="${PODMAN_BINARY%%-remote} ${ROOTDIR_OPTS} ${PODMAN_REGISTRY_OPTS}"
+        if [[ -n "$PODMAN_SERVER_LOG" ]]; then
+            (
+                echo "---------------------------------"
+                echo "- bats test ${BATS_TEST_NUMBER} : ${BATS_TEST_NAME}"
+            ) >> $PODMAN_SERVER_LOG
+        fi
+
+        # Path to podman socket file
+        local sockdir=/run
+        if is_rootless; then
+            sockdir=${XDG_RUNTIME_DIR:-/run/user/$(id -u)}
+            mkdir -p ${sockdir}/podman
+        fi
+        PODMAN_SOCK_FILE=$sockdir/podman/podman-${BATS_SUITE_TEST_NUMBER}.sock
+        PODMAN_REMOTE_OPTS="--url unix://${PODMAN_SOCK_FILE}"
+        # static CONTAINERS_CONF needed for capabilities test. As of 2021-07-01
+        # no tests in bud.bats override this; if at some point any test does
+        # so, it will probably need to be skip_if_remote()d.
+        echo "$_LOG_PROMPT $PODMAN_NATIVE system service [...] unix://${PODMAN_SOCK_FILE}" >&2
+        env CONTAINERS_CONF_OVERRIDE=${CONTAINERS_CONF_OVERRIDE:-$(dirname ${BASH_SOURCE})/containers.conf} $PODMAN_NATIVE system service --log-level=info --timeout=0 unix://${PODMAN_SOCK_FILE} &>>${PODMAN_SERVER_LOG:-/dev/stderr} &
+        PODMAN_SERVER_PID=$!
+        echo ">> pid=$PODMAN_SERVER_PID" >>${PODMAN_SERVER_LOG:-/dev/stderr}
+        local timeout=30
+        while ((timeout > 0)); do
+            test -S $PODMAN_SOCK_FILE && return
+            sleep 0.2
+            timeout=$((timeout - 1))
+        done
+        die "podman server never came up: $PODMAN_SOCK_FILE"
+    fi
 }
 
 function starthttpd() { # directory [working-directory-or-"" [certfile, keyfile]]
@@ -144,6 +180,35 @@ function teardown_tests() {
     stop_git_daemon
     stop_registry
 
+    if [[ -n "$PODMAN_SERVER_PID" ]]; then
+        echo "teardown: stopping podman server $PODMAN_SERVER_PID"
+        kill $PODMAN_SERVER_PID
+        wait $PODMAN_SERVER_PID
+        # Socket file should go away once server exits
+        local timeout=10
+        while [[ -S $PODMAN_SOCK_FILE ]]; do
+            timeout=$((timeout - 1))
+            if [[ $timeout -eq 0 ]]; then
+                echo "# WARNING! $PODMAN_SOCK_FILE did not go away" >&3
+                rm -f $PODMAN_SOCK_FILE
+            fi
+            sleep 0.5
+        done
+    fi
+
+    # FIXME! 2024-11-22: I have no idea if this is still relevant, but it
+    # certainly does not play well with parallel bats tests. Let's see
+    # what happens if we disable it.
+    # FIXME! 2023-04-11: under remote + rootless, on the very first test,
+    # we somehow end up with two podman-system-service jobs. The second one
+    # lingers, and prevents BATS from completing, manifesting as a test hang.
+#    if is_rootless; then
+#        ps auxww | grep "system service" | grep -v grep | while read user pid rest; do
+#            echo "# teardown: killing stray server: $user $pid $rest" >&3
+#            kill $pid
+#        done
+#    fi
+
     # Workaround for #1991 - buildah + overlayfs leaks mount points.
     # Many tests leave behind /var/tmp/.../root/overlay and sub-mounts;
     # let's find those and clean them up, otherwise 'rm -rf' fails.
@@ -265,7 +330,12 @@ function copy() {
 }
 
 function podman() {
-    command ${PODMAN_BINARY:-podman} ${PODMAN_REGISTRY_OPTS} ${ROOTDIR_OPTS} "$@"
+    local cmd=${PODMAN_BINARY:-podman}
+    local opts="${PODMAN_REGISTRY_OPTS} ${ROOTDIR_OPTS}"
+    if [[ $cmd =~ remote ]]; then
+        opts="${PODMAN_REMOTE_OPTS}"
+    fi
+    command $cmd $opts "$@"
 }
 
 # There are various scenarios where we would like to execute `tests` as rootless user, however certain commands like `buildah mount`
@@ -329,8 +399,36 @@ function run_buildah() {
         --retry)         retry=3;        shift;;  # retry network flakes
     esac
 
+    local podman_or_buildah=${BUILDAH_BINARY}
+    local _opts="${ROOTDIR_OPTS} ${BUILDAH_REGISTRY_OPTS}"
+    if [[ $1 == "build" || $1 == "build-using-dockerfile" || $1 == "bud" ]]; then
+        shift
+        # podman defaults to --layers=true; buildah to --false.
+        # If command line includes explicit --layers, leave it untouched,
+        # but otherwise update command line so podman mimics buildah default.
+        if [[ "$*" =~ --layers || "$*" =~ --squash ]]; then
+            set "build" "--force-rm=false" "$@"
+        else
+            set "build" "--force-rm=false" "--layers=false" "$@"
+        fi
+        podman_or_buildah=${PODMAN_BINARY}
+        _opts="${ROOTDIR_OPTS} ${PODMAN_REGISTRY_OPTS}"
+        if [[ -n "$REMOTE" ]]; then
+            _opts="${PODMAN_REMOTE_OPTS}"
+        fi
+
+        # Special case: there's one test that invokes git in such
+        # a way that it exits 128 (which IMO is a bug in git).
+        # podman exits 125 in that case.
+        case $expected_rc in
+            128)   expected_rc=125 ;;
+        esac
+    fi
+    local cmd_basename=$(basename ${podman_or_buildah})
+
+
     # Remember command args, for possible use in later diagnostic messages
-    MOST_RECENT_BUILDAH_COMMAND="buildah $*"
+    MOST_RECENT_BUILDAH_COMMAND="$cmd_basename $*"
 
     # If session is rootless and `buildah mount` is invoked, perform unshare,
     # since normal user cannot mount a filesystem unless they're in a user namespace along with its own mount namespace.
@@ -344,8 +442,8 @@ function run_buildah() {
         retry=$(( retry - 1 ))
 
         # stdout is only emitted upon error; this echo is to help a debugger
-        echo "${_LOG_PROMPT} $BUILDAH_BINARY $*"
-        run env CONTAINERS_CONF=${CONTAINERS_CONF:-$(dirname ${BASH_SOURCE})/containers.conf} timeout --foreground --kill=10 $BUILDAH_TIMEOUT ${BUILDAH_BINARY} ${BUILDAH_REGISTRY_OPTS} ${ROOTDIR_OPTS} "$@"
+        echo "${_LOG_PROMPT} $cmd_basename $*"
+        run env CONTAINERS_CONF=${CONTAINERS_CONF:-$(dirname ${BASH_SOURCE})/containers.conf} timeout --foreground --kill=10 $BUILDAH_TIMEOUT ${podman_or_buildah} ${_opts} "$@"
         # without "quotes", multiple lines are glommed together into one
         if [ -n "$output" ]; then
             echo "$output"
@@ -706,6 +804,26 @@ function skip_if_no_unshare() {
   fi
 }
 
+####################
+#  skip_if_remote  #  (only applicable for podman)
+####################
+function skip_if_remote() {
+    if [[ -n "$REMOTE" ]]; then
+        skip "${1:-test does not work with podman-remote}"
+    fi
+}
+
+#############################
+#  skip_if_rootless_remote  #  (only applicable for podman)
+#############################
+function skip_if_rootless_remote() {
+    if [[ -n "$REMOTE" ]]; then
+        if is_rootless; then
+            skip "${1:-test does not work with rootless podman-remote}"
+        fi
+    fi
+}
+
 function start_git_daemon() {
   daemondir=${TEST_SCRATCH_DIR}/git-daemon
   mkdir -p ${daemondir}/repo
-- 
2.47.0

