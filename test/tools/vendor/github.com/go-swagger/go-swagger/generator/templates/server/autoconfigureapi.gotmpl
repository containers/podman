// Code generated by go-swagger; DO NOT EDIT.
// Auto configures api handlers Implementations.

{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}


package {{ .APIPackage }}

import (
  "context"
  "crypto/tls"
  "io"
  "log"
  "net/http"

  "github.com/go-openapi/errors"
  "github.com/go-openapi/runtime"
  "github.com/go-openapi/runtime/middleware"
  "github.com/go-openapi/runtime/security"

  {{ imports .DefaultImports }}
  {{ imports .Imports }}
)

{{ with .GenOpts }}
//go:generate swagger generate server --target {{ .TargetPath }} --name {{ .Name }} --spec {{ .SpecPath }}
{{- if .APIPackage }}{{ if ne .APIPackage "operations" }} --api-package {{ .APIPackage }}{{ end }}{{ end }}
{{- if .ModelPackage }}{{ if ne .ModelPackage "models" }} --model-package {{ .ModelPackage }}{{ end }}{{ end }}
{{- if .ServerPackage }}{{ if ne .ServerPackage "restapi"}} --server-package {{ .ServerPackage }}{{ end }}{{ end }}
{{- if .ClientPackage }}{{ if ne .ClientPackage "client" }} --client-package {{ .ClientPackage }}{{ end }}{{ end }}
{{- if .ImplementationPackage }} --implementation-package {{ .ImplementationPackage }}{{ end }}
{{- if .TemplateDir }} --template-dir {{ .TemplateDir }}{{ end }}
{{- range .Operations }} --operation {{ . }}{{ end }}
{{- range .Tags }} --tags {{ . }}{{ end }}
{{- if .Principal }} --principal {{ .Principal }}{{ end }}
{{- if .DefaultScheme }}{{ if ne .DefaultScheme "http" }} --default-scheme {{ .DefaultScheme }}{{ end }}{{ end }}
{{- range .Models }} --model {{ . }}{{ end }}
{{- if or (not .IncludeModel) (not .IncludeValidator) }} --skip-models{{ end }}
{{- if or (not .IncludeHandler) (not .IncludeParameters ) (not .IncludeResponses) }} --skip-operations{{ end }}
{{- if not .IncludeSupport }} --skip-support{{ end }}
{{- if not .IncludeMain }} --exclude-main{{ end }}
{{- if .ExcludeSpec }} --exclude-spec{{ end }}
{{- if .DumpData }} --dump-data{{ end }}
{{- if .StrictResponders }} --strict-responders{{ end }}
{{- if .ReturnErrors }} --return-errors{{ end }}
{{ end }}

// This file auto configures the api backend implementation.
// {{.ImplementationPackageAlias}} package must already exist.
// {{.ImplementationPackageAlias}}.New() is implemented by user, and must return an object
// or interface that implements Handler interface defined below.
var Impl Handler = {{.ImplementationPackageAlias}}.New()

// Handler handles all api server backend configurations and requests
type Handler interface{
{{- if .SecurityDefinitions }}
  Authable
{{- end }}
  Configurable
{{ range .OperationGroups -}}
  {{ pascalize .Name }}Handler
{{ end -}}
}

// Configurable handles all server configurations
type Configurable interface {
  ConfigureFlags(api *{{.APIPackageAlias}}.{{ pascalize .Name }}API)
  ConfigureTLS(tlsConfig *tls.Config)
  ConfigureServer(s *http.Server, scheme, addr string)
  CustomConfigure(api *{{.APIPackageAlias}}.{{ pascalize .Name }}API)
  SetupMiddlewares(handler http.Handler) http.Handler
  SetupGlobalMiddleware(handler http.Handler) http.Handler
}

{{- if .SecurityDefinitions }}
// Authable handles server authentication
type Authable interface{
  {{- range .SecurityDefinitions }}
    {{- if .IsBasicAuth }}
  // Applies when the Authorization header is set with the Basic scheme
  {{ pascalize .ID }}Auth(user string, password string) ({{ if .PrincipalIsNullable }}*{{ end }}{{.Principal}}, error)
    {{- else if .IsAPIKeyAuth }}
  // Applies when the "{{ .Name }}" {{ .Source }} is set
  {{ pascalize .ID }}Auth(token string) ({{ if .PrincipalIsNullable }}*{{ end }}{{.Principal}}, error)
    {{- else if .IsOAuth2 }}
  {{ pascalize .ID }}Auth(token string, scopes []string) ({{ if .PrincipalIsNullable }}*{{ end }}{{.Principal}}, error)
    {{- end }}
  {{- end }}
}
{{- end }}

{{- $package := .Package }}
{{- $apipackagealias := .APIPackageAlias }}
{{ range .OperationGroups -}}
/* {{ pascalize .Name }}Handler {{ .Description }} */
type {{ pascalize .Name }}Handler interface {
{{ range .Operations -}}
	{{ if .Summary -}}
	/* {{ pascalize .Name }} {{ .Summary }} */
	{{ else if .Description -}}
	/* {{ pascalize .Name }} {{ .Description }} */
	{{ end -}}
	{{ pascalize .Name }}(params {{ if ne .Package $package }}{{ .PackageAlias }}{{ else }}{{- $apipackagealias }}{{ end }}.
    {{- pascalize .Name }}Params {{- if .Authorized}}, principal {{ if .PrincipalIsNullable }}*{{ end }}{{.Principal}}{{end}})
      {{- if $.GenOpts.ReturnErrors }}
        {{- if $.GenOpts.StrictResponders }} ({{.Package}}.{{ pascalize .Name }}Responder, error) {{ else }} (middleware.Responder, error) {{ end }}
      {{ else }}
        {{- if $.GenOpts.StrictResponders }} {{.Package}}.{{ pascalize .Name }}Responder {{ else }} middleware.Responder {{ end }}
      {{ end -}}
{{ end -}}
}
{{ end }}

func configureFlags(api *{{.APIPackageAlias}}.{{ pascalize .Name }}API) {
  Impl.ConfigureFlags(api)
}

func configureAPI(api *{{.APIPackageAlias}}.{{ pascalize .Name }}API) http.Handler {

  api.ServeError = errors.ServeError

  api.UseSwaggerUI()

  {{ range .Consumes }}
    {{- if .Implementation }}
  api.{{ pascalize .Name }}Consumer = {{ .Implementation }}
    {{- else }}
  api.{{ pascalize .Name }}Consumer = runtime.ConsumerFunc(func(r io.Reader, target any) error {
    return Impl.{{ pascalize .Name }}Consume(r, target)
  })
    {{- end }}
  {{- end }}
  {{ range .Produces }}
    {{- if .Implementation }}
  api.{{ pascalize .Name }}Producer = {{ .Implementation }}
    {{- else }}
  api.{{ pascalize .Name }}Producer = runtime.ProducerFunc(func(w io.Writer, data any) error {
    return Impl.{{ pascalize .Name }}Produce(w, target)
  })
    {{- end }}
  {{- end}}
  {{ range .SecurityDefinitions }}
    {{- if .IsBasicAuth }}
  // Applies when the Authorization header is set with the Basic scheme
  api.{{ pascalize .ID }}Auth = func(user string, password string) ({{ if .PrincipalIsNullable }}*{{ end }}{{.Principal}}, error) {
    return Impl.{{ pascalize .ID }}Auth(user, password)
  }

    {{- else if .IsAPIKeyAuth }}
  // Applies when the "{{ .Name }}" {{ .Source }} is set
  api.{{ pascalize .ID }}Auth = func(token string) ({{ if .PrincipalIsNullable }}*{{ end }}{{.Principal}}, error) {
      return Impl.{{ pascalize .ID }}Auth(token)
  }
    {{- else if .IsOAuth2 }}
  api.{{ pascalize .ID }}Auth = func(token string, scopes []string) ({{ if .PrincipalIsNullable }}*{{ end }}{{.Principal}}, error) {
    return Impl.{{ pascalize .ID }}Auth(token, scopes)
  }
    {{- end }}
  {{- end }}

  {{- $package := .Package }}
  {{- $apipackagealias := .APIPackageAlias }}
  {{ range .Operations }}
    api.{{ if ne .Package $package }}{{pascalize .Package}}{{ end }}{{ pascalize .Name }}Handler =
    {{- if ne .Package $package }}
      {{- .PackageAlias }}.{{- pascalize .Name }}HandlerFunc(func(params {{ .PackageAlias }}.{{- pascalize .Name }}Params
    {{- else }}
      {{- $apipackagealias }}.{{- pascalize .Name }}HandlerFunc(func(params {{ $apipackagealias }}.{{- pascalize .Name }}Params
    {{- end }}
    {{- if .Authorized}}, principal {{ if .PrincipalIsNullable }}*{{ end }}{{.Principal}}{{end}})
      {{- if $.GenOpts.ReturnErrors }}
          {{- if $.GenOpts.StrictResponders }} ({{.Package}}.{{ pascalize .Name }}Responder, error) { {{ else }} (middleware.Responder, error) { {{ end }}
      {{ else }}
          {{- if $.GenOpts.StrictResponders }} {{.Package}}.{{ pascalize .Name }}Responder { {{ else }} middleware.Responder { {{ end }}
      {{ end }}
      return Impl.{{ pascalize .Name }}(params {{- if .Authorized}}, principal {{ end }})
    })
  {{- end }}

  api.PreServerShutdown = func() {  }

  api.ServerShutdown = func() {  }

  // CustomConfigure can override or add to configurations set above
  Impl.CustomConfigure(api)

  return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
  // Make all necessary changes to the TLS configuration here.
  Impl.ConfigureTLS(tlsConfig)
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix".
func configureServer(s *http.Server, scheme, addr string) {
	Impl.ConfigureServer(s, scheme, addr)
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation.
func setupMiddlewares(handler http.Handler) http.Handler {
	return Impl.SetupMiddlewares(handler)
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics.
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return Impl.SetupGlobalMiddleware(handler)
}
