// Code generated by go-swagger; DO NOT EDIT.


{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}


package {{ .Name }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
  "fmt"
  "net/http"
  "github.com/go-openapi/errors"
  "github.com/go-openapi/swag"
  "github.com/go-openapi/runtime"
  "github.com/go-openapi/validate"

  strfmt "github.com/go-openapi/strfmt"

  {{ imports .DefaultImports }}
  {{ imports .Imports }}
)

//go:generate mockery --name API --keeptree --with-expecter --case underscore

// API is the interface of the {{ humanize .Name }} client
type API interface {
{{ range .Operations -}}
/*
{{ pascalize .Name }} {{ if .Summary }}{{ pluralizeFirstWord (humanize .Summary) }}{{ if .Description }}

{{ blockcomment .Description }}{{ end }}{{ else if .Description}}{{ blockcomment .Description }}{{ else }}{{ humanize .Name }} API{{ end -}}
*/
  {{ pascalize .Name }}(ctx context.Context, params *{{ pascalize .Name }}Params{{ if .HasStreamingResponse }}, writer io.Writer{{ end }}) {{ if .SuccessResponse }}({{ range .SuccessResponses }}*{{ pascalize .Name }}, {{ end }}{{ end }}error{{ if .SuccessResponse }}){{ end }}
{{ end -}}
}

// New creates a new {{ humanize .Name }} API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
  return &Client{
    transport: transport,
    formats: formats,
    authInfo: authInfo,
  }
}

/*
Client {{ if .Summary }}{{ .Summary }}{{ if .Description }}

{{ blockcomment .Description }}{{ end }}{{ else if .Description}}{{ blockcomment .Description }}{{ else }}for {{ humanize .Name }} API{{ end }}
*/
type Client struct {
  transport runtime.ClientTransport
  formats strfmt.Registry
  authInfo runtime.ClientAuthInfoWriter
}

{{ range .Operations -}}
/*
{{ pascalize .Name }} {{ if .Summary }}{{ pluralizeFirstWord (humanize .Summary) }}{{ if .Description }}

{{ blockcomment .Description }}{{ end }}{{ else if .Description}}{{ blockcomment .Description }}{{ else }}{{ humanize .Name }} API{{ end }}
*/
func (a *Client) {{ pascalize .Name }}(ctx context.Context, params *{{ pascalize .Name }}Params{{ if .HasStreamingResponse }}, writer io.Writer{{ end }}) {{ if .SuccessResponse }}({{ range .SuccessResponses }}*{{ pascalize .Name }}, {{ end }}{{ end }}error{{ if .SuccessResponse }}){{ end }} {
  {{- $length := len .SuccessResponses }}
  {{- $success := .SuccessResponses }}
  {{ if .Responses }}result{{else}}_{{end}}, err := a.transport.Submit(&runtime.ClientOperation{
    ID: {{ printf "%q" .Name }},
    Method: {{ printf "%q" .Method }},
    PathPattern: {{ printf "%q" .Path }},
    ProducesMediaTypes: {{ printGoLiteral .ProducesMediaTypes }},
    ConsumesMediaTypes: {{ printGoLiteral .ConsumesMediaTypes }},
    Schemes: {{ printGoLiteral .Schemes }},
    Params: params,
    Reader: &{{ pascalize .Name }}Reader{formats: a.formats{{ if .HasStreamingResponse }}, writer: writer{{ end }}},
    {{ if .Authorized -}}
    AuthInfo: a.authInfo,
    {{ end -}}
    Context: ctx,
    Client:  params.HTTPClient,
  })
  if err != nil {
    return {{ if $success }}{{ padSurround "nil" "nil" 0 $length }}, {{ end }}err
  }
  {{- if .Responses }}
    {{- if gt (len .Responses) 1 }}

  switch value := result.(type) {
    {{- range $i, $v := .Responses }}
  case *{{ pascalize $v.Name }}:
      {{- if $v.IsSuccess }}
    return {{ if $success }}{{ padSurround "value" "nil" $i $length }},{{ end }}nil
      {{- else }}
    return {{ if $success }}{{ padSurround "nil" "nil" 0 $length }},{{ end }}runtime.NewAPIError("unsuccessful response", value, value.Code())
      {{- end }}
    {{- end }}
  }
    {{- else }}
      {{- $v := (index .Responses 0) }}
  if value, ok := result.(*{{ pascalize $v.Name }}) ; ok {
      {{- if $v.IsSuccess }}
    return {{ if $success }}{{ padSurround "value" "nil" 0 $length }},{{ end }}nil
      {{- else }}
    return {{ if $success }}{{ padSurround "nil" "nil" 0 $length }},{{ end }}runtime.NewAPIError("unsuccessful response", value, value.Code())
      {{- end }}
  }
    {{- end }}

  // unexpected response.
    {{- if .DefaultResponse }}
  //
  // a default response is provided: fill this and return an error
  unexpectedSuccess := result.(*{{ pascalize .DefaultResponse.Name }})

  return {{ if $success }}{{ padSurround "nil" "nil" 0 $length }}, {{ end }}runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
    {{- else }}

  // no default response is defined.
  //
  // safeguard: normally, in the absence of a default response, unknown responses return an error above: so this is a codegen issue
  msg := fmt.Sprintf("unexpected success response for {{ .Name }}: API contract not enforced by server. Client expected to get an error, but got: %T", result)
  panic(msg)
    {{- end }}
  {{- else }}
  return nil
  {{- end }}
}
{{ end }}
