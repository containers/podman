{{- define "specTitle" }}
  {{- if .Info }}
    {{- if .Info.Title }}
      {{- printf "%q" .Info.Title }}
    {{- else }}
      {{- if .ExcludeSpec }}""{{ else }}swaggerSpec.Spec().Info.Title{{ end }}
    {{- end }}
  {{- else }}
    {{- if .ExcludeSpec }}""{{ else }}swaggerSpec.Spec().Info.Title{{ end }}
  {{- end}}
{{- end }}

{{- define "specDescription" }}
  {{- if .Info }}
    {{- if .Info.Description }}
      {{- printf "%q" .Info.Description }}
    {{- else }}
      {{- if .ExcludeSpec }}""{{ else }}swaggerSpec.Spec().Info.Description{{ end }}
    {{- end }}
  {{- else }}
    {{- if .ExcludeSpec }}""{{ else }}swaggerSpec.Spec().Info.Description{{ end }}
  {{- end}}
{{- end }}

{{- define "printUsage" }}    fmt.Fprint(os.Stderr, "Usage:\n")
		fmt.Fprint(os.Stderr, "  {{ dasherize .Name }}-server [OPTIONS]\n\n")

    title := {{ template "specTitle" . }}
    if title != "" {
		  fmt.Fprintf(os.Stderr, "%s\n\n", title)
    }
    desc := {{ template "specDescription" . }}
    if desc != "" {
			fmt.Fprintf(os.Stderr, "%s\n\n", desc)
		}
{{- end }}

{{- define "argsParser" }}
  {{- if .UsePFlags }}{{/* CLI flags by github.com/spf13/pflag */}}
	flag.Usage = func() {
    {{ template "printUsage" . }}
		fmt.Fprintln(os.Stderr, flag.CommandLine.FlagUsages())
	}

	// parse the CLI flags
	flag.Parse() // exit on error
  {{- else if .UseGoStructFlags }}{{/* CLI flags by github.com/jessevdk/go-flags */}}
  parser := flags.NewParser(server, flags.Default)
  parser.ShortDescription = {{ template "specTitle" . }}
  parser.LongDescription = {{ template "specDescription" . }}
    {{- if not .ExcludeSpec }}
  for _, optsGroup := range api.CommandLineOptionsGroups {
    _, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
    if err != nil {
      log.Fatalln(err)
    }
  }
    {{- end }}

	if _, err := parser.Parse(); err != nil {
		code := 1
    fe := new(flags.Error)
    if errors.As(err, &fe) {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}
  {{- else if .UseFlags }}{{/* CLI flags by standard library */}}
	flag.Usage = func() {
    {{ template "printUsage" . }}
		flag.CommandLine.SetOutput(os.Stderr)
    flag.PrintDefaults()
	}

	// parse the CLI flags
	flag.Parse() // exit on error
  {{- else }}
  // missing a CLI flag library setting
  {{- end }}
{{- end }}
// Code generated by go-swagger; DO NOT EDIT.

{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}

package main

import (
  "errors"
  "fmt"
  "log"
  "net/http"
  "os"

  "github.com/go-openapi/loads"
  {{- if .UseGoStructFlags }}
  flags "github.com/jessevdk/go-flags"
  {{- else if .UsePFlags }}
  flag "github.com/spf13/pflag"
  {{- else if .UseFlags }}
  "flag"
  {{- else }}
  // missing a CLI flag library setting
  {{- end }}

  {{ imports .DefaultImports }}
  {{ imports .Imports }}
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!
{{- if .ExcludeSpec }}{{/* spec excluded means that it is not built inside the generated code and loaded at runtime */}}

func init() {
  loads.AddLoader(fmts.YAMLMatcher, fmts.YAMLDoc)
}
{{- end }}

func main() {
{{- if .ExcludeSpec }}
  {{- if not .UseGoStructFlags }}{{/* with pflag and flag, an init() func injects args */}}
  var server *{{ .ServerPackageAlias }}.Server
  {{- else }}
  server := {{ .ServerPackageAlias }}.NewServer(nil)
  {{- end }}
{{- else }}
  swaggerSpec, err := loads.Embedded({{ .ServerPackageAlias }}.SwaggerJSON, {{ .ServerPackageAlias }}.FlatSwaggerJSON)
  if err != nil {
    log.Fatalln(err)
  }

  api := {{.APIPackageAlias}}.New{{ pascalize .Name }}API(swaggerSpec)
	server := {{ .ServerPackageAlias }}.NewServer(api)
  server.ConfigureFlags() // inject API-specific custom flags. Must be called before args parsing
{{- end }}

{{ template "argsParser" . }}

{{- if .ExcludeSpec }}{{/* since the API is not loaded, we can't configure API-specific flags in this mode */}}
  {{- if not .UseGoStructFlags }}{{/* with pflag and flag, args are retrieved using New */}}
  server = {{ .ServerPackageAlias }}.NewServer(nil) // the server has no API set yet, but configuration from flags is retrieved at this point
  {{- end }}

  // spec loaded at run time from the provided CLI flags
  if server.Spec == "" {
    log.Fatalln("a spec must be provided by the command line")
  }

  swaggerSpec, err := loads.Spec({{ if .UseGoStructFlags }}string({{ end }}server.Spec{{ if .UseGoStructFlags }}){{ end }})
  if err != nil {
    log.Fatalln(err)
  }
  api := {{.APIPackageAlias}}.New{{ pascalize .Name }}API(swaggerSpec)
  server.SetAPI(api)
{{- end }}

	server.ConfigureAPI() // configure handlers, routes and middleware

	if err := server.Serve(); err != nil {
    _ = server.Shutdown()

		log.Fatalln(err)
	}
}
